package cm.fwi.dao;

import static cm.fwi.dao.DAOUtil.closeResources;
import static cm.fwi.dao.DAOUtil.closeResource;
import static cm.fwi.dao.DAOUtil.initPreparedStatement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import cm.fwi.beans.Profile;

public class ProfileDaoImpl implements ProfileDao {

    private static final String SQL_QUERY_CREATE_PROF = "INSERT INTO Profile (dte, weight, size, age, sex, fwi, comment) VALUES (?, ?, ?, ?, ?, ?, ?)";
    private static final String SQL_QUERY_READ_PROF   = "SELECT * FROM Profile WHERE id=(SELECT MAX(id) FROM Profile)";
    private static final String SQL_QUERY_LIST_PROF   = "SELECT * FROM Profile";
    private static final String SQL_QUERY_DEL_PROF    = "DELETE FROM Profile WHERE id=?";

    private DAOFactory          daoFactory;

    /**
     * 
     * @param daoFactory
     */
    public ProfileDaoImpl( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    /**
     * 
     */
    @Override
    public void createProfile( Profile profile ) throws DAOException, PoolException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int status;
        ResultSet autoGeneratedValues = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_CREATE_PROF, true,
                    profile.getDte(), profile.getWeight(), profile.getSize(), profile.getAge(),
                    profile.getSex(), profile.getFwi(), profile.getComment() );
            status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Fail to create the Profile, no new line add to tha database." );
            }
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValues.next() ) {
                profile.setId( autoGeneratedValues.getInt( 1 ) );
            } else {
                throw new DAOException( "Fail to create new Profile, no ID has been auto generated." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( "The process fail to create Profile.", e );
        } finally {
            daoFactory.deliverConnection( connection );
            closeResources( autoGeneratedValues, preparedStatement );
        }

    }

    /**
     * 
     */
    @Override
    public Profile readProfile( Long id ) throws DAOException , PoolException{

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Profile profile = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_READ_PROF, false);
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                profile = mapProfile( resultSet );
            }

            return profile;
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read a Profile from the database", e );
        } finally {
            daoFactory.deliverConnection( connection );
            closeResources( resultSet, preparedStatement );
        }
    }

    /**
     * 
     */
    @Override
    public List<Profile> listOfProfiles() throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Profile profile = null;
        List<Profile> profiles = new ArrayList<Profile>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_LIST_PROF, false );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                profile = mapProfile( resultSet );
                profiles.add( profile );
            }

            return profiles;
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read the Profiles from the database", e );
        } finally {
            daoFactory.deliverConnection( connection );
            closeResources( resultSet, preparedStatement );
        }
    }

    /**
     * 
     */
    @Override
    public void deleteProfile( Long id ) throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int status;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_DEL_PROF, false, id );
            status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Fail to delete a Profile from the database." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read a Profile from the database", e );
        } finally {
            daoFactory.deliverConnection( connection );
            closeResource( preparedStatement );
        }
    }

    /**
     * 
     * @param resultSet
     * @return
     * @throws SQLException
     */
    public Profile mapProfile( ResultSet resultSet ) throws SQLException {

        Profile profile = new Profile();

        profile.setId( resultSet.getLong( 1 ) );
        profile.setFirst_name( resultSet.getString( 2 ) );
        profile.setLast_name( resultSet.getString( 3 ) );
        profile.setAdress( resultSet.getString( 4 ) );
        profile.setPhone( resultSet.getString( 5 ) );
        profile.setEmail( resultSet.getString( 6 ) );
        profile.setPicture( resultSet.getString( 7 ) );

        return Profile;
    }
}
