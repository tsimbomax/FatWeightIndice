package cm.fwi.dao;

import static cm.fwi.dao.DAOUtil.closeResources;
import static cm.fwi.dao.DAOUtil.initPreparedStatement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import cm.fwi.beans.Profile;

public class ProfileDaoImpl implements ProfileDao {

    private static final String SQL_QUERY_CREATE_CUST = "INSERT INTO Customer (first_name, last_name, adress, phone, email, picture) VALUES (?, ?, ?, ?, ?, ?)";
    private static final String SQL_QUERY_READ_CUST   = "SELECT * FROM Customer WHERE id=?";
    private static final String SQL_QUERY_LIST_CUST   = "SELECT * FROM Customer";
    private static final String SQL_QUERY_DEL_CUST    = "DELETE FROM Customer WHERE id=?";

    private DAOFactory          daoFactory;

    public CustomerDaoImpl( DAOFactory daoFactory ) {
        this.daoFactory = daoFactory;
    }

    public void createCustomer( Customer customer ) throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int status;
        ResultSet autoGeneratedValues = null;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_CREATE_CUST, true,
                    customer.getFirst_name(), customer.getLast_name(), customer.getAdress(), customer.getPhone(),
                    customer.getEmail(), customer.getPicture() );
            status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Fail to create the customer, no new line add to tha database." );
            }
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if ( autoGeneratedValues.next() ) {
                customer.setId( autoGeneratedValues.getLong( 1 ) );
            } else {
                throw new DAOException( "Fail to create new customer, no ID has been auto generated." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( "The process fail to create customer.", e );
        } finally {
            closeResources( autoGeneratedValues, preparedStatement, connection );
        }

    }

    public Customer readCustomer( Long id ) throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Customer customer = new Customer();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_READ_CUST, false, id );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                customer = mapCustomer( resultSet );
            }

            return customer;
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read a customer from the database", e );
        } finally {
            closeResources( resultSet, preparedStatement, connection );
        }
    }

    public List<Customer> listOfCustomers() throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        Customer customer = new Customer();
        List<Customer> customers = new ArrayList<Customer>();

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_LIST_CUST, false );
            resultSet = preparedStatement.executeQuery();
            while ( resultSet.next() ) {
                customer = mapCustomer( resultSet );
                customers.add( customer );
            }

            return customers;
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read the customers from the database", e );
        } finally {
            closeResources( resultSet, preparedStatement, connection );
        }
    }

    public void deleteCustomer( Long id ) throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int status;

        try {
            connection = daoFactory.getConnection();
            preparedStatement = initPreparedStatement( connection, SQL_QUERY_DEL_CUST, false, id );
            status = preparedStatement.executeUpdate();
            if ( status == 0 ) {
                throw new DAOException( "Fail to delete a customer from the database." );
            }
        } catch ( SQLException e ) {
            throw new DAOException( "Fail to read a customer from the database", e );
        } finally {
            closeResources( preparedStatement, connection );
        }
    }

    public Customer mapCustomer( ResultSet resultSet ) throws SQLException {

        Customer customer = new Customer();

        customer.setId( resultSet.getLong( 1 ) );
        customer.setFirst_name( resultSet.getString( 2 ) );
        customer.setLast_name( resultSet.getString( 3 ) );
        customer.setAdress( resultSet.getString( 4 ) );
        customer.setPhone( resultSet.getString( 5 ) );
        customer.setEmail( resultSet.getString( 6 ) );
        customer.setPicture( resultSet.getString( 7 ) );

        return customer;
    }

	@Override
	public Customer readCustomer(Long id) throws DAOException {
		// TODO Auto-generated method stub
		return null;
	}
}
