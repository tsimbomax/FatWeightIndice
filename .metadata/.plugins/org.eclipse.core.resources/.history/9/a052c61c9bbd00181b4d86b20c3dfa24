package cm.fwi.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class Pool {

    // je me figure ce zouave quio joue du xylophone en buvant du whisky. Je me figure cae aouvq qui joue du xylophmne en buvant du whisky
    private static final int        NUM_CON = 3;
    private static List<Connection> connections        = new ArrayList<Connection>();
    private static List<Boolean> states = new ArrayList<Boolean>();
    private static Pool pool = null;
    
    static {
    	for(int i=0; i<NUM_CON; i++) {
    		connections.add(null);
    		states.add(false);
    	}
    }
    
    /**
     * Private and unique constructor
     * @param url to the database
     * @param user user name to used for the connection to the database
     * @param password of the user to used for the connection to the database
     * @throws PoolException when an error occurs during the establishment of one connection.
     */
    private Pool( String url, String user, String password ) throws PoolException {

        for ( int i = 0; i < NUM_CON; i++ ) {
            try {
				Pool.connections.set(i, DriverManager.getConnection(url, user, password));
				states.set(i, true);
			} catch (SQLException e) {
				// if we want we could not close the open connections and work with them
				closeConnections();//1) put 'had' 2)commented this line and put 'have'
				throw new PoolException("Fail to create a Poll, " + i +" connections had been create over " +NUM_CON, e);
			}
        }
    }
    
    /**
     * This method create the unique instance of Pool if is not yet done.
     * @param url to the database
     * @param user user name to used for the connection to the database
     * @param password of the user to used for the connection to the database
     * @return the unique instance of Pool.
     * @throws PoolException when errors occur during the connections establishment.
     */
    public static Pool getInstance( String url, String user, String password ) throws PoolException{

        if ( pool != null) {
            return pool;
        }
        
        Pool.pool =  new Pool( url, user, password );
        return pool;
        
    }

    /**
     * This method return the first free (true state) connection of the pooling connection (unique instance of Pool) and set the state of this connection to busy(false in the state list).
     * @return return the first free connection of the pooling
     * @throws PoolException when there is no free connection (connection with true's state)
     */
    public Connection getConnection() throws PoolException{

    	for(int i=0; i<NUM_CON; i++) {
    		if(states.get(i)) {
    			states.set(i, false);
    			return connections.get(i);
    		}
    	}
        throw new PoolException("No free connection in the pooling connection");
    }

    /**
     * Deliver a connection of the pooling (unique instance of Pool) by setting its state from busy(false) to free(true).
     * @param connection that wants to be deliver
     * @throws PoolException when the deliver's connection does not exist  in the pooling connection (ie. amoung the list of connection of the Pool's instance).
     */
    public void deliverConnection( Connection connection ) throws PoolException{
    	for(int i=0; i<NUM_CON; i++) {
    		if(connections.get(i)==connection) {
    			states.set(i, true);
    		}
    	}
    	throw new PoolException("Can not delivery a connection which is not managed by the Pool instance");
    }
    
    /**
     * This method clause all connections of the Pool's instace and clear both the states and connections lists.
     * @throws PoolException is throws when the process fail to close a connection.
     */
    public void closeConnections() throws PoolException{
    	states.clear();
    	for(int i=0; i<NUM_CON; i++) {
    		try {
    			if(connections.get(i)!=null)
    				connections.get(i).close();
    		} catch(SQLException e) {
    			throw new PoolException("The process fail to close the Pool", e);
    		}
    	}
    	connections.clear();
    }
}
